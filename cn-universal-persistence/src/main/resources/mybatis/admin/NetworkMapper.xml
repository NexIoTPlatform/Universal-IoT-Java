<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.universal.persistence.mapper.NetworkMapper">

  <!-- 基础结果映射 -->
  <resultMap id="NetworkResult" type="cn.universal.persistence.entity.Network">
    <result property="id" column="id"/>
    <result property="type" column="type"/>
    <result property="unionId" column="union_id"/>
    <result property="productKey" column="product_key"/>
    <result property="name" column="name"/>
    <result property="description" column="description"/>
    <result property="createDate" column="create_date"/>
    <result property="createUser" column="create_user"/>
    <result property="state" column="state"/>
    <result property="configuration" column="configuration"/>
  </resultMap>

  <!-- 业务对象结果映射 -->
  <resultMap id="NetworkBOResult" type="cn.universal.persistence.entity.bo.NetworkBO"
    extends="NetworkResult">
    <result property="typeName" column="type_name"/>
    <result property="stateName" column="state_name"/>
    <result property="createDateStr" column="create_date_str"/>
  </resultMap>

  <!-- 查询字段 -->
  <sql id="selectNetworkVo">
    SELECT n.id,
           n.type,
           n.union_id,
           n.product_key,
           n.name,
           n.description,
           n.create_date,
           n.create_user,
           n.state,
           n.configuration,
           CASE
             WHEN n.type = 'TCP_CLIENT' THEN 'TCP客户端'
             WHEN n.type = 'TCP_SERVER' THEN 'TCP服务端'
             WHEN n.type = 'MQTT_CLIENT' THEN 'MQTT客户端'
             WHEN n.type = 'MQTT_SERVER' THEN 'MQTT服务端'
             ELSE n.type
             END                                           as type_name,
           CASE
             WHEN n.state = 1 THEN '启动'
             ELSE '关闭'
             END                                           as state_name,
           DATE_FORMAT(n.create_date, '%Y-%m-%d %H:%i:%s') as create_date_str
    FROM iot_network n
  </sql>

  <!-- 查询条件 -->
  <sql id="whereClause">
    <where>
      <if test="types != null and types.size() > 0">
        AND n.type IN
        <foreach collection="types" item="typeItem" open="(" separator="," close=")">
          #{typeItem}
        </foreach>
      </if>
      <if test="name != null and name != ''">
        AND n.name LIKE CONCAT('%', #{name}, '%')
      </if>
      <if test="productKey != null and productKey != ''">
        AND n.product_key = #{productKey}
      </if>
      <if test="state != null">
        AND n.state = #{state}
      </if>
      <if test="unionId != null and unionId != ''">
        AND n.union_id = #{unionId}
      </if>
      <if test="createUser != null and createUser != ''">
        AND n.create_user = #{createUser}
      </if>
    </where>
  </sql>

  <!-- 查询网络组件列表 -->
  <select id="selectNetworkList" parameterType="cn.universal.persistence.query.NetworkQuery"
    resultMap="NetworkBOResult">
    <include refid="selectNetworkVo"/>
    <include refid="whereClause"/>
    ORDER BY n.create_date DESC
  </select>

  <!-- 查询网络组件总数 -->
  <select id="selectNetworkCount" parameterType="cn.universal.persistence.query.NetworkQuery"
    resultType="int">
    SELECT COUNT(1)
    FROM iot_network n
    <include refid="whereClause"/>
  </select>

  <!-- 根据ID查询网络组件 -->
  <select id="selectNetworkById" parameterType="Integer" resultMap="NetworkResult">
    <include refid="selectNetworkVo"/>
    WHERE n.id = #{id}
  </select>

  <!-- 根据类型和唯一标识查询网络组件 -->
  <select id="selectNetworkByTypeAndUnionId" resultMap="NetworkResult">
    <include refid="selectNetworkVo"/>
    WHERE n.type = #{type} AND n.union_id = #{unionId}
  </select>

  <!-- 新增网络组件 -->
  <insert id="insertNetwork" parameterType="cn.universal.persistence.entity.Network"
    useGeneratedKeys="true"
    keyProperty="id">
    INSERT INTO iot_network (type,
                             union_id,
                             product_key,
                             name,
                             description,
                             create_date,
                             create_user,
                             state,
                             configuration)
    VALUES (#{type},
            #{unionId},
            #{productKey},
            #{name},
            #{description},
            NOW(),
            #{createUser},
            #{state},
            #{configuration})
  </insert>

  <!-- 修改网络组件 -->
  <update id="updateNetwork" parameterType="cn.universal.persistence.entity.Network">
    UPDATE iot_network
    <set>
      <if test="type != null and type != ''">type = #{type},</if>
      <if test="unionId != null and unionId != ''">union_id = #{unionId},</if>
      <if test="productKey != null and productKey != ''">product_key = #{productKey},</if>
      <if test="name != null and name != ''">name = #{name},</if>
      <if test="description != null">description = #{description},</if>
      <if test="state != null">state = #{state},</if>
      <if test="configuration != null">configuration = #{configuration},</if>
    </set>
    WHERE id = #{id}
  </update>

  <!-- 删除网络组件 -->
  <delete id="deleteNetworkById" parameterType="Integer">
    DELETE
    FROM iot_network
    WHERE id = #{id}
  </delete>

  <!-- 批量删除网络组件 -->
  <delete id="deleteNetworkByIds" parameterType="Integer[]">
    DELETE FROM iot_network WHERE id IN
    <foreach collection="array" item="id" open="(" separator="," close=")">
      #{id}
    </foreach>
  </delete>

  <!-- 更新网络组件状态 -->
  <update id="updateNetworkState">
    UPDATE iot_network
    SET state = #{state}
    WHERE id = #{id}
  </update>

  <select id="selectNetWorkByPort" resultType="java.lang.Integer">
    select count(id)
    from iot_network
    where type = 'TCP_SERVER'
      and product_key != #{productKey}
      and JSON_EXTRACT(configuration
        , concat('$.'
        , 'port')) = #{port}
  </select>

  <select id="selectNetworkListV1" resultType="cn.universal.persistence.entity.vo.NetworkVO">
    select nw.id,nw.name,nw.type,nw.product_key,nw.create_date,nw.create_user,nw.state from
    iot_network
    nw
    <where>
      1=1
      <if test="bo.type!=null and bo.type!=''">
        and nw.type=#{bo.type}
      </if>
      <if test="bo.types!=null and bo.types.size() > 0">
        and nw.type IN
        <foreach collection="bo.types" item="typeItem" open="(" separator="," close=")">
          #{typeItem}
        </foreach>
      </if>
      <if test="bo.unionId!=null and bo.unionId!=''">
        and nw.product_key=#{bo.unionId}
      </if>
      <if test="bo.state!=null ">
        and nw.state=#{bo.state}
      </if>
      <if test="bo.name!=null and bo.name!=''">
        and nw.name=#{bo.name}
      </if>
    </where>
  </select>

  <select id="selectById" resultType="cn.universal.persistence.entity.vo.NetworkVO">
    select nw.*
    from iot_network nw
    where nw.id = #{id}
  </select>

  <!-- 根据端口查询TCP网络组件（排除指定ID） -->
  <select id="selectTcpNetworkByPort" resultMap="NetworkResult">
    <include refid="selectNetworkVo"/>
    WHERE n.type IN ('TCP_CLIENT', 'TCP_SERVER')
    AND JSON_EXTRACT(n.configuration, '$.port') = #{port}
    <if test="excludeId != null">
      AND n.id != #{excludeId}
    </if>
  </select>

  <!-- 根据主机和用户名查询MQTT网络组件（排除指定ID） -->
  <select id="selectMqttNetworkByHostAndUsername" resultMap="NetworkResult">
    <include refid="selectNetworkVo"/>
    WHERE n.type IN ('MQTT_CLIENT', 'MQTT_SERVER')
    AND JSON_EXTRACT(n.configuration, '$.host') = #{host}
    AND JSON_EXTRACT(n.configuration, '$.username') = #{username}
    <if test="excludeId != null">
      AND n.id != #{excludeId}
    </if>
  </select>

  <select id="selectTcpNetworkByPortCount" resultType="int" parameterType="map">
    SELECT COUNT(1) FROM iot_network
    WHERE type IN ('TCP_CLIENT', 'TCP_SERVER')
    AND JSON_EXTRACT(configuration, '$.port') = #{port}
    <if test="excludeId != null">
      AND id != #{excludeId}
    </if>
  </select>

  <!-- 根据唯一标识查询网络组件 -->
  <select id="selectByUnionId" resultMap="NetworkResult">
    <include refid="selectNetworkVo"/>
    WHERE n.union_id = #{unionId}
  </select>

</mapper> 